/*
 * Nibble - Concurrent Log-Structured Memory for Many-Core Key-Value Stores
 *
 * (c) 2017 Hewlett Packard Enterprise Development LP.
 *
 * This program is free software: you can redistribute it and/or modify it under the terms of the
 * GNU Lesser General Public License as published by the Free Software Foundation, either version 3
 * of the License, or (at your option) any later version. This program is distributed in the hope that
 * it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License along with this program.
 * If not, see <http://www.gnu.org/licenses/>. As an exception, the copyright holders of this Library
 * grant you permission to (i) compile an Application with the Library, and (ii) distribute the Application
 * containing code generated by the Library and added to the Application during this compilation process
 * under terms of your choice, provided you also meet the terms and conditions of the Application license.
 */


extern crate kvs;
use kvs::distributions::*;
use std::time::Instant;

fn main() {
	let mut d: Box<DistGenerator> = Box::new(Zipfian::new(10000, 0.99));

	let now = Instant::now();
	let mut hist: [usize; 10000] = [0usize; 10000];
	for _ in 0..10_000_000_usize {
		hist[d.next() as usize] += 1;
		hist[d.next() as usize] += 1;
		hist[d.next() as usize] += 1;
		hist[d.next() as usize] += 1;
		hist[d.next() as usize] += 1;
		hist[d.next() as usize] += 1;
		hist[d.next() as usize] += 1;
		hist[d.next() as usize] += 1;
		hist[d.next() as usize] += 1;
		hist[d.next() as usize] += 1;
	}
	let el = now.elapsed();
	let t = el.as_secs() as f64 +
				el.subsec_nanos() as f64 / 1_000_000_000f64;

	for i in 0..10000 {
		println!("{}: {}", i, hist[i]);
	}

	println!("generates {} numbers/sec", 100_000_000f64 / t);
}
