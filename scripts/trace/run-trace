/*
 * Nibble - Concurrent Log-Structured Memory for Many-Core Key-Value Stores
 *
 * (c) 2017 Hewlett Packard Enterprise Development LP.
 *
 * This program is free software: you can redistribute it and/or modify it under the terms of the
 * GNU Lesser General Public License as published by the Free Software Foundation, either version 3
 * of the License, or (at your option) any later version. This program is distributed in the hope that
 * it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License along with this program.
 * If not, see <http://www.gnu.org/licenses/>. As an exception, the copyright holders of this Library
 * grant you permission to (i) compile an Application with the Library, and (ii) distribute the Application
 * containing code generated by the Library and added to the Application during this compilation process
 * under terms of your choice, provided you also meet the terms and conditions of the Application license.
 */


#! /usr/bin/env zsh
set -u

# in bytes
# Only used by MICA and RAMCloud. To affect LSM,
# you must modify the executable (either command argument, or a global
# within the code itself).
#MEMSIZE=$((2*(1<<40)))
MEMSIZE=$((2**40 + 340*(2**30)))

NKEYS=5000000000

export NIBDEBUG=3

source ../redis/funcs
export NREDIS_SERVERS=64

# RAMCloud accepts this value in MiB
export RCMEM=$((1.1*MEMSIZE/1024/1024))
export RAMCLOUD_ARGV="-t $RCMEM -h 10%"
# number of args + 1 (like 'int argc' in C main)
export RAMCLOUD_NARG=5

# Choose the system (MICA, LSM, etc.) via FEATURES at bottom.

# script to gather system information
SYSINFO="../sysinfo"

######################################################################

capacity=$MEMSIZE

run() {
    $SYSINFO

    echo ''; echo ''
    echo "Compile features $FEATURES"
    echo "Memsize $MEMSIZE bytes"

    # MICA environment vars. keep regardless of which KVS we use.
    # MICA only supports one object size...
    # FIXME is this used anymore??
    #MICA_VAL_LEN=$size

    # Use this for measuring performance of inserts (setup phase).
    #for ((s=1;s<=15;s++)); do
        #export TRACE_SETUP_THREADS_PER_SOCK=$s
        #cargo run --features "$FEATURES" --release --bin trace
    #done

    # 17% capacity utilization
    util=0.17
    # 5.7GB per thread in the postmark trace
    perthread=5.7
    for ((t=15;t<=240;t+=15)); do
        echo ''; echo '';
        echo threads=$t
        export MEMSIZE=$(((2**30)*(t*perthread)/util))
        echo MEMSIZE=$MEMSIZE
        # RAMCloud accepts this value in MiB
        # add 10% b/c RC takes this from total memory for the index
        export RCMEM=$((1.1*MEMSIZE/1024/1024))
        export RAMCLOUD_ARGV="-t $RCMEM -h 10%"
        echo RCMEM=$RCMEM
        echo RAMCLOUD_ARGV=$RAMCLOUD_ARGV
        # number of args + 1 (like 'int argc' in C main)
        export RAMCLOUD_NARG=5
        export THREADCOUNT=$t
        # Regular trace evaluation
        cargo run --features "$FEATURES" --release --bin trace
    done

    echo ''; echo ''
}

##  # Other systems don't explicitly use large pages
##  echo 'Clearing all 2 MiB page reservations...'
##  sudo su -c 'echo 0 > /sys/kernel/mm/hugepages/hugepages-2048kB/nr_hugepages'

## FEATURES="rdrand extern_ycsb masstree"
## (run 2>&1) | tee -a log-masstree.out

##  export FEATURES="rdrand extern_ycsb rc"
##  export RAMCLOUD_NCONTEXTS=1
##  # OMP threads are only for speeding up the initialization
##  export OMP_NUM_THREADS=256
##  (run 2>&1) | tee -a log-rc-1.out

##  export FEATURES="rdrand extern_ycsb rc"
##  export RAMCLOUD_NCONTEXTS=240
##  # limit OMP to 1 thread; library spawns many, so has same effect
##  export OMP_NUM_THREADS=1
##  (run 2>&1) | tee -a log-rc-M.out

##  FEATURES="rdrand extern_ycsb redis"
##  redis_stop
##  # this script dumps out some info we need...
##  (redis_spawn $NREDIS_SERVERS 2>&1) | tee -a log-redis.out
##  sleep 1
##  conf=$(tail log-redis.out | grep HIREDISCONF | tail -n 1 | awk '{print $NF}')
##  echo conf = $conf
##  [ -e hiredis.conf ] && rm -fv hiredis.conf
##  [ ! -e $conf ] && echo "Error: hiredis.conf not found: $conf" && exit 1
##  # link the new conf file for hiredis
##  ln -s -v $conf ./hiredis.conf
##  (run 2>&1) | tee -a log-redis.out
##  redis_stop

##  # MICA and LSM need 2MiB pages
##  echo 'Creating 2 MiB page reservations...'
##  sudo su -c 'echo 4700000 > /sys/kernel/mm/hugepages/hugepages-2048kB/nr_hugepages'
##  sudo su -c 'echo 2700000 > /sys/kernel/mm/hugepages/hugepages-2048kB/nr_hugepages'

##  export FEATURES="rdrand"
##  (run 2>&1) | tee -a log-kvs.out

##  # Used for creating the hash table.. make large enough
##  export MICA_ITEMS=$((NKEYS*2))
##  export MICA_CAPACITY=$capacity
##  export FEATURES="rdrand extern_ycsb mica"
##  (run 2>&1) | tee -a log-mica.out

