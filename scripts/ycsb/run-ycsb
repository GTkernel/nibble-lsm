#! /usr/bin/env zsh
set -u

# not all options passed to ycsb are used (most are inherited from
# when ycsb only ran with nibble), e.g. --put and --capacity are not
# used when not running with Nibble, as such parameters are passed
# through environment variables.
#
# If you modify src/bin/ycsb.rs to iterate over some number of
# threads, you can save on avoiding repeated startup costs
#
# For MICA, don't forget to update src/common.h with the NCORES and
# NNODES parameters and rebuild!

# in MiB
#MEMSIZE=$((128*1024))
MEMSIZE=$((1*(1<<40)))
# MICA doesn't use log-structured allocators for its "store mode" so
# we needn't allocate so much space for the given keyspace
# 64mil keys * 1000b = 64GiB
#MEMSIZE=$((512*(1<<30)))

export NIBDEBUG=3

export RAMCLOUD_ARGV="-t $MEMSIZE -h 10%"
# number of args + 1 (like 'int argc' in C main)
export RAMCLOUD_NARG=5

# used only for RAMCloud
#FEATURES="extern_ycsb rc"
# used only for MICA
#FEATURES="extern_ycsb mica"
# used only for Nibble
FEATURES=""

# YCSB parameters
#  C    size=1kb  1:0  zipfian
#  B    size=1kb 95:05 zipfian
#  A    size=1kb 50:50 zipfian
# 'W'   size=1kb  0:1  zipfian
#
# and we can also do uniform for each of the above

size=1000
size=100

#nkeys=$((2**26))
#size=100
#nkeys=$((2**30))

SHIFT=0

NSOCKETS=16
NCPU=15

# How long test core should run for.
SEC=40

######################################################################

# in MiB

capacity=$MEMSIZE

## # these will be modified
readpct=0

read_mostly() {
    #for dist in uniform zipfian; do
    for dist in uniform; do

    #for T in C B; do
    for T in B; do

    for fill in 30; do

    for size in 1000; do

        echo ''; echo ''
        #echo "Fill capacity $fill %"

        # header + key + value
        objsize=$(( 4 + 8 + $size ))
        maxkeys=$(( $capacity / $objsize ))
        #nkeys=$(( ($maxkeys * $fill) / 100 ))
        nkeys=$((1<<26))
        echo "objsize $objsize maxkeys $maxkeys nkeys $nkeys"

        [[ $T == "C" ]] && readpct=100
        [[ $T == "B" ]] && readpct=95
        echo ''; echo ''
        echo "# $T $dist"

        # MICA environment vars. keep regardless of which KVS we use.
        # MICA only supports one object size...
        export MICA_VAL_LEN=$size
        # Used for creating the hash table.. make large enough
        export MICA_ITEMS=$((nkeys*2))
        export MICA_CAPACITY=$capacity

        cargo run --features "$FEATURES" --release --bin ycsb -- \
            --dist $dist \
            --readpct $readpct \
            --records $nkeys \
            --capacity $capacity \
            --ops 0 \
            --threads 1 \
            --time $SEC \
            --cpu incr \
            --size $size \
            --put local
            #--shift $SHIFT
        echo ''; echo ''

    done
    done
    done
    done
}

write_mostly() {
    #for T in A W; do
    for T in A; do

    #for dist in uniform zipfian; do
    for dist in uniform; do

    #for fill in 30 60; do
    for fill in 60; do

    for size in 1000 100; do

        echo ''; echo ''
        echo "Fill capacity $fill %"

        # header + key + value
        objsize=$(( 4 + 8 + $size ))
        maxkeys=$(( $capacity / $objsize ))
        nkeys=$(( ($maxkeys * $fill) / 100 ))
        echo "objsize $objsize maxkeys $maxkeys nkeys $nkeys"


        [[ $T == "A" ]] && readpct=50
        [[ $T == "W" ]] && readpct=0
        [[ $T == "B" ]] && readpct=95


        echo ''; echo ''
        echo "# $T $dist"

        # MICA environment vars. keep regardless of which KVS we use.
        # MICA only supports one object size...
        export MICA_VAL_LEN=$size
        # Used for creating the hash table.. make large enough
        export MICA_ITEMS=$((nkeys*2))
        export MICA_CAPACITY=$capacity

        cargo run --features "$FEATURES" --release --bin ycsb -- \
            --dist $dist \
            --readpct $readpct \
            --records $nkeys \
            --capacity $capacity \
            --ops 0 \
            --threads 1 \
            --time $SEC \
            --cpu incr \
            --size $size \
            --put local \
            --shift $SHIFT \
            --compaction
    done
    done
    done
    done
}

read_mostly
#write_mostly

